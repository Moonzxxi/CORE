using Integration.Code;
using Integration.Requests;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Integration.Responses
{
    public class ResponseClientRegister : Response
    {
        #region Atributes and Constructors
        private string autoGeneratedPin;
        private bool auto;

        public string AutoGeneratedPin { get => autoGeneratedPin; set => autoGeneratedPin = value; }

        public bool Auto { get => auto; set => auto = value; }

        public ResponseClientRegister()
        {

        }

        public ResponseClientRegister(bool success, bool autogenerated, string AuthPin)
        {
            Success = success;
            Message = null;
            Auto = autogenerated;

            switch (Success)
            {
                case true:
                    {
                        if (Auto == true)
                        {
                            Message = "El cliente se ha registrado exitosamente, y se ha generado el siguiente pin:";
                            AutoGeneratedPin = AuthPin;
                        }

                        else
                        {
                            Message = "El cliente se ha registrado exitosamente.";
                        }
                    }
                    break;

                case false:
                    {
                        Message = "No se pudo registrar el cliente.";
                    }
                    break;

                default:
                    {
                        throw new Exception("Success is a boolean, and can only be either true or false.");
                    }
                    break;
            }
        }
        #endregion

        public static ResponseClientRegister ResponseToClientRegistration(RequestClientRegister clientToRegister)
        {
            Log.Debug("Se inició el metodo de la 'Capa de Integración'", new Exception("Bank2.ConnectionException.FaultyCore: Core services are down!"));
            ResponseClientRegister responseClient = null;
            string autoGenerated = ResponseClientRegister.RandomlyGeneratedPin();
            bool auto;

            try
            {
                if (clientToRegister.AutoGenerate == true)
                {
                    clientToRegister.Pin_Regs = autoGenerated;
                    auto = true;
                }

                else
                {
                    if (clientToRegister.Pin_Regs.Length > 8) clientToRegister.Pin_Regs = clientToRegister.Pin_Regs.Substring(0, 7);
                    auto = false;
                }

                Entities.Integration.clientRegister(clientToRegister.Identifier, clientToRegister.Name_Regs, clientToRegister.Lastname_Regs,
                    clientToRegister.Password_Regs, clientToRegister.Pin_Regs, clientToRegister.Direction_Regs, clientToRegister.Email_Regs);

                responseClient = new ResponseClientRegister(true, auto, clientToRegister.Pin_Regs);

            }

            catch (Exception ex)
            {
                Log.Error("Ocurrió un error al procesar 'ResponseClientRegister'.", ex);
                responseClient = new ResponseClientRegister(false, false, null);
            }

            Log.Info("El 'ResponseClientRegister' se ha ejecutado existosamente.");
            return responseClient;
        }

        //Do not touch.
        private static string RandomlyGeneratedPin()
        {
            List<int> randNums = new List<int> { };
            Random random = new Random();

            try
            {
                for (int c = 0; c < 8; c++)
                {
                    int num = random.Next(0, 9);
                    randNums.Add(num);
                }
            }

            catch (Exception ex)
            {
                throw new Exception("Problems generating numbers!");
            }

            finally
            {
                GC.Collect();
            }

            return $"{randNums.ElementAt(0)}{randNums.ElementAt(1)}{randNums.ElementAt(2)}{randNums.ElementAt(3)}" +
                $"{randNums.ElementAt(4)}{randNums.ElementAt(5)}{randNums.ElementAt(6)}{randNums.ElementAt(7)}";
        }
    }
}